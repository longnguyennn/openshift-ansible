apiVersion: "v1"
kind: "DeploymentConfig"
metadata:
  name: "{{ deploy_name }}"
  labels:
    provider: openshift
    es-component: "{{ component }}"
    cluster-name: "{{ cluster_name }}"
    logging-infra: "{{ logging_component }}"
spec:
  replicas: {{ replicas | default(1) }}
  selector:
    provider: openshift
    es-component: "{{ component }}"
    cluster-name: "{{ cluster_name }}"
  strategy:
    rollingParams:
      intervalSeconds: 1
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      name: "{{ deploy_name }}"
      labels:
        logging-infra: "{{ logging_component }}"
        provider: openshift
        es-component: "{{ component }}"
        cluster-name: "{{ cluster_name }}"
    spec:
      serviceAccountName: "{{ openshift_logging_kibana_service_account }}"
{% if kibana_node_selector is iterable and kibana_node_selector | length > 0 %}
      nodeSelector:
{% for key, value in kibana_node_selector.iteritems() %}
        {{ key }}: "{{ value }}"
{% endfor %}
{% endif %}
      containers:
        -
          name: "kibana"
          image: {{ image }}
          imagePullPolicy: Always
{% if (kibana_memory_limit is defined and kibana_memory_limit is not none and kibana_memory_limit != "") or (kibana_cpu_limit is defined and kibana_cpu_limit is not none and kibana_cpu_limit != "") %}
          resources:
            limits:
{% if kibana_cpu_limit is not none and kibana_cpu_limit != "" %}
              cpu: "{{ kibana_cpu_limit }}"
{% endif %}
{% if kibana_memory_limit is not none and kibana_memory_limit != "" %}
              memory: "{{ kibana_memory_limit }}"
{% endif %}
{% endif %}
          env:
            - name: "ES_HOST"
              value: "{{ es_host }}"
            - name: "ES_PORT"
              value: "{{ es_port }}"
            -
              name: "KIBANA_MEMORY_LIMIT"
              valueFrom:
                resourceFieldRef:
                  containerName: kibana
                  resource: limits.memory
{% if secure_kibana %}
          volumeMounts:
            - name: kibana
              mountPath: /etc/kibana/keys
              readOnly: true
{% endif %}
{% if oauth_proxy %}
        -
          name: "kibana-proxy"
          image: {{ proxy_image }}
          imagePullPolicy: Always
{% if (kibana_proxy_memory_limit is defined and kibana_proxy_memory_limit is not none and kibana_proxy_memory_limit != "") or (kibana_proxy_cpu_limit is defined and kibana_proxy_cpu_limit is not none and kibana_proxy_cpu_limit != "") %}
          resources:
            limits:
{% if kibana_proxy_cpu_limit is not none and kibana_proxy_cpu_limit != "" %}
              cpu: "{{ kibana_proxy_cpu_limit }}"
{% endif %}
{% if kibana_proxy_memory_limit is not none and kibana_proxy_memory_limit != "" %}
              memory: "{{ kibana_proxy_memory_limit }}"
{% endif %}
{% endif %}
          ports:
            -
              name: "oauth-proxy"
              containerPort: 8443
          args:
          - -https-address=:8443
          - -email-domain=*
          - -client-id=system:serviceaccount:{{ namespace }}:{{ openshift_logging_kibana_service_account }}
          - -upstream=http://localhost:5601
          - -provider=openshift
          - -redirect-url=https:///oauth2/callback
          - '-openshift-sar={"namespace": "{{ namespace }}", "verb": "list", "resource": "services"}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret

          volumeMounts:
            - name: kibana-tls
              mountPath: /etc/tls/private
            - name: session-secret
              mountPath: /etc/proxy/secrets
              readOnly: true
{% endif %}
{% if secure_kibana %}
      volumes:
        - name: kibana
          secret:
            secretName: logging-kibana
{% endif %}
{% if oauth_proxy %}
        - name: session-secret
          secret:
            secretName: kibana-session-secret
        - name: kibana-tls
          secret:
            secretName: kibana-tls
{% endif %}
