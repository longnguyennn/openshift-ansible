---
# we want to make sure we have all the necessary components here

- name: Retrieving the cert to use when generating secrets for the logging components
  slurp:
    src: "{{ generated_certs_dir }}/{{ item.file }}"
  register: key_pairs
  with_items:
    - { name: "ca_file", file: "ca.crt" }
    - { name: "kibana_internal_key", file: "kibana-internal.key"}
    - { name: "kibana_internal_cert", file: "kibana-internal.crt"}
    - { name: "server_tls", file: "server-tls.json"}

# create routes
# TODO: set up these certs differently?
- set_fact:
    kibana_key: "{{ lookup('file', openshift_logging_kibana_key) | b64encode }}"
  when: "{{ openshift_logging_kibana_key | trim | length > 0 }}"
  changed_when: false

- set_fact:
    kibana_cert: "{{ lookup('file', openshift_logging_kibana_cert) | b64encode }}"
  when: "{{ openshift_logging_kibana_cert | trim | length > 0 }}"
  changed_when: false

- set_fact:
    kibana_ca: "{{ lookup('file', openshift_logging_kibana_ca) | b64encode }}"
  when: "{{ openshift_logging_kibana_ca | trim | length > 0 }}"
  changed_when: false

- set_fact:
    kibana_ca: "{{ key_pairs | entry_from_named_pair('ca_file') }}"
  when: kibana_ca is not defined
  changed_when: false

# create oauth client
- name: Create oauth-client template
  template:
    src: oauth-client.j2
    dest: "{{ tempdir }}/templates/oauth-client.yml"
  vars:
    kibana_hostname: "{{ openshift_logging_kibana_hostname }}"
    secret: "{{ oauth_secret }}"

- name: Set kibana-proxy oauth-client
  oc_obj:
    state: present
    name: "kibana-proxy"
    namespace: "{{ openshift_kibana_namespace }}"
    kind: oauthclient
    files:
    - "{{ tempdir }}/templates/oauth-client.yml"
    delete_after: true

# create Kibana secret
- name: Set Kibana secret
  oc_secret:
    state: present
    name: "logging-kibana"
    namespace: "{{ openshift_kibana_namespace }}"
    files:
    - name: ca
      path: "{{ generated_certs_dir }}/ca.crt"
    - name: key
      path: "{{ generated_certs_dir }}/system.logging.kibana.key"
    - name: cert
      path: "{{ generated_certs_dir }}/system.logging.kibana.crt"

# create Kibana-proxy secret
- name: Set Kibana Proxy secret
  oc_secret:
    state: present
    name: "logging-kibana-proxy"
    namespace: "{{ openshift_kibana_namespace }}"
#    files:
#    - name: server-key
#      path: "{{ generated_certs_dir }}/kibana-internal.key"
#    - name: server-cert
#      path: "{{ generated_certs_dir }}/kibana-internal.crt"
#    - name: server-tls
#      path: "{{ generated_certs_dir }}/server-tls.json"
    contents:
    - path: oauth-secret
      data: "{{ oauth_secret }}"
    - path: session-secret
      data: "{{ session_secret }}"
    - path: server-key
      data: "{{ key_pairs | entry_from_named_pair('kibana_internal_key') | b64decode }}"
    - path: server-cert
      data: "{{ key_pairs | entry_from_named_pair('kibana_internal_cert') | b64decode }}"
    - path: server-tls
      data: "{{ key_pairs | entry_from_named_pair('server_tls') | b64decode }}"


