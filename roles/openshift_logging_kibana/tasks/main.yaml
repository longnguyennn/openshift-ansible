---
# fail is we don't have an endpoint for ES to connect to?

- include: determine_version.yaml

- include_role:
    name: openshift_logging_certs
  vars:
    cert_info:
      procure_component: kibana-internal
      hostnames: 'tecentos.local, kibana, {{ openshift_logging_kibana_hostname }}'
    pem_component: "system.logging.kibana"
    generate_jks: true
    generated_certs_dir: '{{ certs_dir }}'

# allow passing in a tempdir
- name: Create temp directory for doing work in
  command: mktemp -d /tmp/openshift-logging-ansible-XXXXXX
  register: mktemp
  changed_when: False

- set_fact:
    tempdir: "{{ mktemp.stdout }}"

# This may not be necessary in this role
- name: Create templates subdirectory
  file:
    state: directory
    path: "{{ tempdir }}/templates"
    mode: 0755
  changed_when: False

# we want to make sure we have all the necessary components here

# create service account
- name: Create Kibana service account
  oc_serviceaccount:
    state: present
    name: "{{ openshift_logging_kibana_service_account }}"
    namespace: "{{ openshift_kibana_namespace }}"
    image_pull_secrets: "{{ openshift_logging_image_pull_secret }}"
    kubeconfig: '{{ kubeconfig }}'
  when: openshift_logging_image_pull_secret is defined

- name: Create Kibana service account
  oc_serviceaccount:
    state: present
    name: "{{ openshift_logging_kibana_service_account }}"
    namespace: "{{ openshift_kibana_namespace }}"
    kubeconfig: '{{ kubeconfig }}'
  when:
  - openshift_logging_image_pull_secret is not defined

# View role and binding
- name: Generate logging-kibana-view-role
  template:
    src: rolebinding.j2
    dest: "{{mktemp.stdout}}/logging-kibana-view-role.yaml"
  vars:
    obj_name: logging-kibana-view-role
    roleRef:
      name: cluster-reader
    subjects:
      - kind: ServiceAccount
        name: "{{ openshift_logging_kibana_service_account }}"
        namespace: "{{ openshift_kibana_namespace }}"
  changed_when: no

- name: Set logging-kibana-view-role role
  oc_obj:
    state: present
    name: "logging-kibana-view-role"
    kind: clusterrolebinding
    namespace: "{{ openshift_kibana_namespace }}"
    files:
    - "{{ tempdir }}/logging-kibana-view-role.yaml"
    delete_after: true
    kubeconfig: '{{ kubeconfig }}'

# Kibana DeploymentConfig name
- set_fact: kibana_name="{{ openshift_kibana_escluster_name }}-kibana"

- name: Secure stuff
  include: '{{ role_path }}/tasks/certs.yaml'
  vars:
    generated_certs_dir: '{{ certs_dir }}'
  when: secure_kibana|bool

# create routes
# TODO: set up these certs differently?
- set_fact:
    kibana_key: "{{ lookup('file', openshift_logging_kibana_key) | b64encode }}"
  when: openshift_logging_kibana_key | trim | length > 0
  changed_when: false

# Service creation
- name: create Kibana service
  oc_service:
    namespace: "{{ openshift_kibana_namespace }}"
    name: "{{ kibana_name }}"
    ports:
    - name: 8443-tcp
      port: 8443
      protocol: TCP
    selector:
      cluster-name: "{{ openshift_kibana_escluster_name }}"
      es-component: "kibana"
#    annotations:
#      service.alpha.openshift.io/serving-cert-secret-name: kibana-tls
    session_affinity: ClientIP
    service_type: ClusterIP
    kubeconfig: '{{ kubeconfig }}'

- name: Oauth proxy stuff
  include: '{{ role_path }}/tasks/oauth_proxy.yaml'
  vars:
    generated_certs_dir: '{{ certs_dir }}'
  when: oauth_proxy|bool

# Kibana route
- name: Generating Kibana secure route template
  template:
    src: route_reencrypt.j2
    dest: "{{ tempdir }}/templates/kibana-route.yaml"
  vars:
    obj_name: "{{ kibana_name }}"
    route_host: "{{ openshift_logging_kibana_hostname }}"
    service_name: "{{ kibana_name }}"
    tls_key: "{{ kibana_key | default('') | b64decode }}"
    tls_cert: "{{ kibana_cert | default('') | b64decode }}"
    tls_ca_cert: "{{ kibana_ca | default('') | b64decode }}"
    tls_dest_ca_cert: "{{ key_pairs | entry_from_named_pair('kibana_internal_cert') | b64decode }}"
    edge_term_policy: "{{ openshift_logging_kibana_edge_term_policy | default('') }}"
    labels:
      component: support
      logging-infra: support
      provider: openshift
  changed_when: no
  when: oauth_proxy|bool

- name: Generating Kibana route template
  template:
    src: route_reencrypt.j2
    dest: "{{ tempdir }}/templates/kibana-route.yaml"
  vars:
    obj_name: "{{ kibana_name }}"
    route_host: "{{ openshift_logging_kibana_hostname }}"
    service_name: "{{ kibana_name }}"
    labels:
      es-component: kibana
      cluster-name: "{{ openshift_kibana_escluster_name }}"
      logging-infra: support
      provider: openshift
  changed_when: no
  when: not oauth_proxy|bool

- name: Setting Kibana route
  oc_obj:
    state: present
    name: "{{ kibana_name }}"
    namespace: "{{ openshift_kibana_namespace }}"
    kind: route
    files:
    - "{{ tempdir }}/templates/kibana-route.yaml"
    kubeconfig: '{{ kubeconfig }}'

# create Kibana DC
- name: Generate Kibana DC template
  template:
    src: kibana.j2
    dest: "{{ tempdir }}/templates/kibana-dc.yaml"
  vars:
    component: kibana
    logging_component: kibana
    deploy_name: "{{ kibana_name }}"
    image: "{{ openshift_kibana_image_prefix }}kibana:{{ openshift_logging_kibana_image_version }}"
    proxy_image: "{{ openshift_oauth2_proxy_image }}"
    es_host: "{{ openshift_logging_kibana_es_host }}"
    es_port: "{{ openshift_logging_kibana_es_port }}"
    kibana_cpu_limit: "{{ openshift_logging_kibana_cpu_limit }}"
    kibana_memory_limit: "{{ openshift_logging_kibana_memory_limit }}"
    kibana_proxy_cpu_limit: "{{ openshift_logging_kibana_proxy_cpu_limit }}"
    kibana_proxy_memory_limit: "{{ openshift_logging_kibana_proxy_memory_limit }}"
    replicas: "{{ openshift_logging_kibana_replicas | default (0) }}"
    kibana_node_selector: "{{ openshift_logging_kibana_nodeselector | default({}) }}"
    cluster_name: "{{ openshift_kibana_escluster_name }}"
    namespace: "{{ openshift_kibana_namespace }}"


- name: Set Kibana DC
  oc_obj:
    state: present
    name: "{{ kibana_name }}"
    namespace: "{{ openshift_kibana_namespace }}"
    kind: dc
    files:
    - "{{ tempdir }}/templates/kibana-dc.yaml"
    delete_after: true
    kubeconfig: '{{ kubeconfig }}'

# Scale up Kibana -- is this really necessary?
- name: Start Kibana
  oc_scale:
    kind: dc
    name: "{{ kibana_name }}"
    namespace: "{{ openshift_kibana_namespace }}"
    replicas: "{{ openshift_logging_kibana_replicas | default (1) }}"
    kubeconfig: '{{ kubeconfig }}'

# update master configs?

- name: Delete temp directory
  file:
    name: "{{ tempdir }}"
    state: absent
  changed_when: False
