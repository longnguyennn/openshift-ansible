---
#- name: Ensure that ElasticSearch has nodes to run on
#  import_role:
#    name: openshift_master
#    tasks_from: ensure_nodes_matching_selector.yml
#  vars:
#    openshift_master_ensure_nodes_selector: "{{ openshift_logging_elasticsearch_nodeselector | map_to_pairs }}"
#    openshift_master_ensure_nodes_service: Elasticsearch

- fail:
    msg: Invalid deployment type, one of ['data-master', 'data-client', 'master', 'client'] allowed
  when: not openshift_logging_elasticsearch_deployment_type in __allowed_es_types

#- set_fact:
#    elasticsearch_name: "{{ 'logging-elasticsearch' ~ ( (openshift_logging_elasticsearch_ops_deployment | default(false) | bool) | ternary('-ops', '')) }}"
#    es_component: "{{ 'es' ~ ( (openshift_logging_elasticsearch_ops_deployment | default(false) | bool) | ternary('-ops', '') ) }}"

- name: Set default image variables based on openshift_deployment_type
  include_vars: "{{ var_file_name }}"
  with_first_found:
  - "{{ openshift_deployment_type }}.yml"
  - "default_images.yml"
  loop_control:
    loop_var: var_file_name

- name: Set elasticsearch image facts
  set_fact:
    openshift_logging_elasticsearch_proxy_image_prefix: "{{ openshift_logging_elasticsearch_proxy_image_prefix | default(__openshift_logging_elasticsearch_proxy_image_prefix) }}"
    openshift_logging_elasticsearch_proxy_image_version: "{{ openshift_logging_elasticsearch_proxy_image_version | default(__openshift_logging_elasticsearch_proxy_image_version) }}"
    openshift_logging_elasticsearch_image_prefix: "{{ openshift_logging_elasticsearch_image_prefix | default(__openshift_logging_elasticsearch_image_prefix) }}"
    openshift_logging_elasticsearch_image_version: "{{ openshift_logging_elasticsearch_image_version | default(__openshift_logging_elasticsearch_image_version) }}"

- include_tasks: get_es_version.yml

- set_fact:
    full_restart_cluster: True
  when:
  - _es_installed_version is defined
  - _es_installed_version.split('.')[0] | int < __es_version.split('.')[0] | int

- set_fact:
    full_restart_cluster: True
  when:
  - _es_ops_installed_version is defined
  - _es_ops_installed_version.split('.')[0] | int < __es_version.split('.')[0] | int

- name: Set oc_bin
  set_fact:
    oc_bin: oc
  when: openshift is not defined

- name: Set oc_bin
  set_fact:
    oc_bin: '{{ openshift.common.client_binary |default("oc") }}'
  when: openshift is defined

- name: Gather OpenShift Elasticsearch cluster facts
  openshift_logging_elasticsearch_facts:
    oc_bin: '{{ oc_bin }}'
    openshift_namespace: "{{openshift_logging_elasticsearch_namespace}}"
    elasticsearch_clustername: "{{ openshift_logging_elasticsearch_clustername }}"
    admin_kubeconfig: '{{ kubeconfig }}'
    oc_username: '{{ oc_username }}'

- name: Reconcile OpenShift Elasticsearch node topology
  openshift_logging_elasticsearch_topology:
    existing_topology: '{{ openshift_logging_elasticsearch_facts.existing_node_topology }}'
    desired_topology: '{{ openshift_logging_elasticsearch_node_topology }}'
    elasticsearch_clustername: '{{ openshift_logging_elasticsearch_clustername }}'
    elasticsearch_cluster_size: '{{ openshift_logging_elasticsearch_cluster_size }}'
    elasticsearch_cpu_limit: '{{ openshift_logging_elasticsearch_cpu_limit }}'
    elasticsearch_memory_limit: '{{ openshift_logging_elasticsearch_memory_limit }}'
    elasticsearch_pv_selector: '{{ openshift_logging_elasticsearch_pv_selector }}'
    elasticsearch_pvc_dynamic: '{{ openshift_logging_elasticsearch_pvc_dynamic }}'
    elasticsearch_pvc_size: '{{ openshift_logging_elasticsearch_pvc_size }}'
    elasticsearch_pvc_prefix: '{{ openshift_logging_elasticsearch_pvc_prefix }}'
    elasticsearch_storage_group: '{{ openshift_logging_elasticsearch_storage_group }}'
    elasticsearch_nodeselector: '{{ openshift_logging_elasticsearch_nodeselector }}'
    elasticsearch_storage_type: '{{ openshift_logging_elasticsearch_storage_type }}'

# service account
- include_tasks: service_accounts.yaml
  vars:
    openshift_elasticsearch_namespace: '{{ openshift_logging_elasticsearch_namespace }}'

# configmap
- assert:
    that:
    - openshift_logging_elasticsearch_kibana_index_mode in __kibana_index_modes
    msg: "The openshift_logging_elasticsearch_kibana_index_mode '{{ openshift_logging_elasticsearch_kibana_index_mode  }}' only supports one of: {{ __kibana_index_modes | join(', ') }}"

- assert:
    that:
    - "{{ openshift_logging_es_log_appenders | length > 0 }}"
    msg: "The openshift_logging_es_log_appenders '{{ openshift_logging_es_log_appenders }}' has an unrecognized option and only supports the following as a list: {{ __es_log_appenders | join(', ') }}"

# Set variables common for all DCs
- name: Setting legacy logging_component for the label
  set_fact:
    logging_component: "{{ openshift_logging_elasticsearch_clustername }}"
    es_component: "{{ openshift_logging_elasticsearch_clustername  | regex_replace('^logging-','') }}"

# Set secrets for Elasticsearch
- name: Set ES secret
  oc_secret:
    state: present
    name: "{{ openshift_logging_elasticsearch_clustername }}-certs"
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    files:
    - name: key
      path: "{{ generated_certs_dir }}/{{ openshift_logging_elasticsearch_api_cert_name }}.jks"
    - name: truststore
      path: "{{ generated_certs_dir }}/truststore.jks"
    - name: searchguard.key
      path: "{{ generated_certs_dir }}/{{ openshift_logging_elasticsearch_transport_cert_name }}.jks"
    - name: searchguard.truststore
      path: "{{ generated_certs_dir }}/truststore.jks"
    - name: admin-key
      path: "{{ generated_certs_dir }}/system.admin.key"
    - name: admin-cert
      path: "{{ generated_certs_dir }}/system.admin.crt"
    - name: admin-ca
      path: "{{ generated_certs_dir }}/ca.crt"
    - name: admin.jks
      path: "{{ generated_certs_dir }}/system.admin.jks"
    kubeconfig: '{{ kubeconfig }}'

- include_tasks: svcs_routes.yaml

- name: Set ES configuration facts for multi-node configuration
  set_fact:
    es_masters_quorum: "{{ openshift_logging_elasticsearch_topology.node_config.es_masters_quorum }}"
    es_recover_expected_data_nodes: "{{ openshift_logging_elasticsearch_topology.node_config.es_recover_expected_data_nodes }}"
    es_recover_expected_nodes: "{{ openshift_logging_elasticsearch_topology.node_config.es_recover_expected_nodes }}"
    es_recover_after_nodes: "{{ openshift_logging_elasticsearch_topology.node_config.es_recover_expected_nodes }}"

# Deploy client-data nodes
- include_tasks: node_provision.yaml
  vars:
    es_cluster_name: "{{ openshift_logging_elasticsearch_clustername }}"
    es_role: "{{ item.1.node_role }}"
    es_node_id: "{{ item.0 }}"
    generated_certs_dir: "{{ certs_dir }}"
    limits: "{{ item.1.limits }}"
    requests: "{{ item.1.requests }}"
    es_node_selector: "{{ item.1.nodeSelector | default({}) }}"
    node_storage_type: "{{ item.1.node_storage_type | default(emptydir) }}"
    openshift_logging_elasticsearch_pvc_name: "{{ item.1.pvc_name | default('')}}"
    openshift_logging_es_number_of_replicas: "{{ item.1.replicas | default(1) }}"
    hostmount_path: "{{ item.1.hostmount_path |default ({})}}"
    es_storage_groups: "{{ openshift_logging_elasticsearch_storage_group | default([]) }}"
    es_container_security_context: "{{ _es_containers.elasticsearch.securityContext if _es_containers is defined and 'elasticsearch' in _es_containers and 'securityContext' in _es_containers.elasticsearch else None }}"
  with_indexed_items: "{{ openshift_logging_elasticsearch_topology.node_topology }}"
