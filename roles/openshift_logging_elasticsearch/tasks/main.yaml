---
- include: determine_version.yaml

- name: Set default image variables based on deployment_type
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ openshift_deployment_type | default(deployment_type) }}.yml"
    - "default_images.yml"

- name: Set elasticsearch_prefix image facts
  set_fact:
    openshift_logging_elasticsearch_proxy_image_prefix: "{{ openshift_logging_elasticsearch_proxy_image_prefix | default(__openshift_logging_elasticsearch_proxy_image_prefix) }}"
    openshift_logging_elasticsearch_proxy_image_version: "{{ openshift_logging_elasticsearch_proxy_image_version | default(__openshift_logging_elasticsearch_proxy_image_version) }}"

- name: Gather OpenShift Logging Facts
  openshift_logging_elasticsearch_facts:
    oc_bin: '{{ openshift.common.client_binary |default("oc") }}'
    openshift_namespace: "{{openshift_logging_elasticsearch_namespace}}"
    elasticsearch_clustername: "{{ openshift_logging_elasticsearch_clustername }}"

# service account
- include: "{{ role_path }}/tasks/service_accounts.yaml"
  vars:
    openshift_elasticsearch_namespace: '{{ openshift_logging_elasticsearch_namespace }}'
# configmap
- assert:
    that:
      - openshift_logging_elasticsearch_kibana_index_mode in __kibana_index_modes
    msg: "The openshift_logging_elasticsearch_kibana_index_mode '{{ openshift_logging_elasticsearch_kibana_index_mode  }}' only supports one of: {{ __kibana_index_modes | join(', ') }}"

- assert:
    that:
      - "{{ openshift_logging_es_log_appenders | length > 0 }}"
    msg: "The openshift_logging_es_log_appenders '{{ openshift_logging_es_log_appenders }}' has an unrecognized option and only supports the following as a list: {{ __es_log_appenders | join(', ') }}"

<<<<<<< HEAD
- template:
    src: elasticsearch-logging.yml.j2
    dest: "{{ tempdir }}/elasticsearch-logging.yml"
  vars:
    root_logger: "{{openshift_logging_es_log_appenders | join(', ')}}"
  when: es_logging_contents is undefined
  changed_when: no

- set_fact:
    __es_num_of_shards: "{{ _es_configmap | default({}) | walk('index.number_of_shards', '1') }}"
    __es_num_of_replicas: "{{ _es_configmap | default({}) | walk('index.number_of_replicas', '0') }}"

- template:
    src: elasticsearch.yml.j2
    dest: "{{ tempdir }}/elasticsearch.yml"
  vars:
    allow_cluster_reader: "{{ openshift_logging_elasticsearch_ops_allow_cluster_reader | lower | default('false') }}"
    es_number_of_shards: "{{ openshift_logging_es_number_of_shards | default(None) or __es_num_of_shards }}"
    es_number_of_replicas: "{{ openshift_logging_es_number_of_replicas | default(None) or __es_num_of_replicas }}"
    es_kibana_index_mode: "{{ openshift_logging_elasticsearch_kibana_index_mode | default('unique') }}"

  when: es_config_contents is undefined
  changed_when: no

- copy:
    content: "{{ es_logging_contents }}"
    dest: "{{ tempdir }}/elasticsearch-logging.yml"
  when: es_logging_contents is defined
  changed_when: no

- copy:
    content: "{{ es_config_contents }}"
    dest: "{{ tempdir }}/elasticsearch.yml"
  when: es_config_contents is defined
  changed_when: no

- name: Set ES configmap
  oc_configmap:
    state: present
    name: "{{ elasticsearch_name }}"
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    from_file:
      elasticsearch.yml: "{{ tempdir }}/elasticsearch.yml"
      logging.yml: "{{ tempdir }}/elasticsearch-logging.yml"

=======
# Set variables common for all DCs
- name: Setting legacy logging_component for the label
  set_fact:
    logging_component: "{{ openshift_logging_elasticsearch_clustername }}"
    es_component: "{{ openshift_logging_elasticsearch_clustername  | regex_replace('^logging-','') }}"
>>>>>>> Moved Elasticsearch 2.x deployment entirely into openshift_logging_elasticsearch role.

# Set secrets for Elasticsearch
- name: Set ES secret
  oc_secret:
    state: present
    name: "{{ openshift_logging_elasticsearch_clustername }}-certs"
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    files:
      - name: key
        path: "{{ generated_certs_dir }}/{{ openshift_logging_elasticsearch_api_cert_name }}.jks"
      - name: truststore
        path: "{{ generated_certs_dir }}/truststore.jks"
      - name: searchguard.key
        path: "{{ generated_certs_dir }}/{{ openshift_logging_elasticsearch_transport_cert_name }}.jks"
      - name: searchguard.truststore
        path: "{{ generated_certs_dir }}/truststore.jks"
      - name: admin-key
        path: "{{ generated_certs_dir }}/system.admin.key"
      - name: admin-cert
        path: "{{ generated_certs_dir }}/system.admin.crt"
      - name: admin-ca
        path: "{{ generated_certs_dir }}/ca.crt"
      - name: admin.jks
        path: "{{ generated_certs_dir }}/system.admin.jks"

- include: "{{ role_path }}/tasks/svcs_routes.yaml"

# Deploy masters
- include: "{{ role_path }}/tasks/node_provision.yaml"
  vars:
    replicas: "{{ openshift_logging_elasticsearch_node_topology.masters.replicas }}"
    es_role: master
    node_master: "true"
    node_data: "false"
    node_client: "false"
    es_http_service: "false"
    openshift_logging_elasticsearch_deployment_name: "{{ openshift_logging_elasticsearch_clustername }}-master"
    generated_certs_dir: "{{ certs_dir }}"
    limits: "{{ openshift_logging_elasticsearch_node_topology.masters.limits }}"
    es_node_selector: "{{ openshift_logging_elasticsearch_node_topology.masters.nodeSelector | default({}) }}"
    node_storage_type: emptydir
    es_storage_groups: "{{ openshift_logging_elasticsearch_storage_group | default([]) }}"
    es_container_security_context: "{{ _es_containers.elasticsearch.securityContext if _es_containers is defined and 'elasticsearch' in _es_containers and 'securityContext' in _es_containers.elasticsearch else None }}"


# Deploy client-data nodes
- include: "{{ role_path }}/tasks/node_provision.yaml"
  vars:
    es_cluster_name: "{{ openshift_logging_elasticsearch_clustername }}"
    es_role: clientdata
    es_http_service: "true"
    node_master: "false"
    node_data: "true"
    node_client: "false"
    openshift_logging_elasticsearch_deployment_name: "{{ openshift_logging_elasticsearch_clustername }}-clientdata-{{ item.0 }}"
    generated_certs_dir: "{{ certs_dir }}"
    limits: "{{ item.1.limits }}"
    es_node_selector: "{{ item.1.nodeSelector | default({}) }}"
    node_storage_type: "{{ item.1.node_storage_type | default(emptydir) }}"
    openshift_logging_elasticsearch_pvc_name: "{{ openshift_logging_es_pvc_prefix }}-{{ item.0 | int }}"
    hostmount_path: "{{ item.1.hostmount_path |default ({})}}"
    es_storage_groups: "{{ openshift_logging_elasticsearch_storage_group | default([]) }}"
    es_container_security_context: "{{ _es_containers.elasticsearch.securityContext if _es_containers is defined and 'elasticsearch' in _es_containers and 'securityContext' in _es_containers.elasticsearch else None }}"
  with_indexed_items: "{{ openshift_logging_elasticsearch_node_topology.clientdata }}"

