---
# service account
- name: Create ES service account
  oc_serviceaccount:
    state: present
    name: "{{ openshift_logging_elasticsearch_sa_name }}"
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    image_pull_secrets: "{{ openshift_logging_elasticsearch_image_pull_secret }}"
  when: openshift_logging_image_pull_secret != ''

- name: Create ES service account
  oc_serviceaccount:
    state: present
    name: "{{ openshift_logging_elasticsearch_sa_name }}"
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
  when:
    - openshift_logging_image_pull_secret == ''

# allow passing in a tempdir
- name: Create temp directory for doing work in
  command: mktemp -d /tmp/openshift-logging-ansible-XXXXXX
  register: mktemp
  changed_when: False

- set_fact:
    tempdir: "{{ mktemp.stdout }}"

# This may not be necessary in this role
- name: Create templates subdirectory
  file:
    state: directory
    path: "{{ tempdir }}/templates"
    mode: 0755
  changed_when: False

# rolebinding reader
- name: Create rolebinding-reader role
  oc_clusterrole:
    state: present
    name: rolebinding-reader
    rules:
      - apiGroups: [""]
        resources: ["clusterrolebindings"]
        verbs: ["get"]
  when: openshift_logging_elasticsearch_clusterreader


# SA roles
- name: Set rolebinding-reader permissions for ES
  oc_adm_policy_user:
    state: present
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    resource_kind: cluster-role
    resource_name: rolebinding-reader
    user: "system:serviceaccount:{{ openshift_logging_elasticsearch_namespace }}:{{ openshift_logging_elasticsearch_sa_name }}"
  when: openshift_logging_elasticsearch_clusterreader

- oc_adm_policy_user:
    state: present
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    resource_kind: cluster-role
    resource_name: system:auth-delegator
    user: "system:serviceaccount:{{ openshift_logging_elasticsearch_namespace}}:{{ openshift_logging_elasticsearch_sa_name }}"

# logging-metrics-reader role
- template:
    src: "{{ __base_file_dir }}/logging-metrics-role.j2"
    dest: "{{mktemp.stdout}}/templates/logging-metrics-role.yml"
  vars:
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
#    role_namespace: "{{ openshift_logging_elasticsearch_prometheus_sa | serviceaccount_namespace(openshift_logging_elasticsearch_namespace) }}"
#    role_user: "{{ openshift_logging_elasticsearch_prometheus_sa | serviceaccount_name }}"

- template:
    src: "{{ __base_file_dir }}/logging-metrics-rolebinding.j2"
    dest: "{{mktemp.stdout}}/templates/logging-metrics-rolebinding.yml"
  vars:
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    role_namespace: "{{ openshift_logging_elasticsearch_prometheus_sa | serviceaccount_namespace(openshift_logging_elasticsearch_namespace) }}"
    role_user: "{{ openshift_logging_elasticsearch_prometheus_sa | serviceaccount_name }}"

- name: Create logging-metrics-reader-rolebinding
  oc_obj:
    state: present
    name: "prometheus-metrics-viewer"
    kind: rolebinding
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    files:
      - "{{mktemp.stdout}}/templates/logging-metrics-rolebinding.yml"
    delete_after: true

- name: Checking for passwd.yml
  stat: path="{{ generated_certs_dir }}/passwd.yml"
  register: passwd_file
  check_mode: no

- when: passwd_file.stat.exists
  slurp:
    src: "{{ generated_certs_dir }}/passwd.yml"
  register: _logging_metrics_proxy_passwd

- when: not passwd_file.stat.exists or openshift_logging_elasticsearch_prometheus_sa not in ( _logging_metrics_proxy_passwd['content'] | b64decode | from_yaml )
  template:
    src: passwd.j2
    dest: "{{ generated_certs_dir }}/passwd.yml"
  vars:
    logging_user_name: "{{ openshift_logging_elasticsearch_prometheus_sa }}"
    logging_user_passwd: "{{ 16 | lib_utils_oo_random_word | b64encode }}"

- slurp:
    src: "{{ generated_certs_dir }}/passwd.yml"
  register: _logging_metrics_proxy_passwd


# View role and binding
- name: Generate logging-elasticsearch-view-role
  template:
    src: "{{ __base_file_dir }}/rolebinding.j2"
    dest: "{{mktemp.stdout}}/logging-elasticsearch-view-role.yaml"
  vars:
    obj_name: logging-elasticsearch-view-role
    roleRef:
      name: view
    subjects:
      - kind: ServiceAccount
        name: "{{ openshift_logging_elasticsearch_sa_name }}"
  changed_when: no

- name: Set logging-elasticsearch-view-role role
  oc_obj:
    state: present
    name: "logging-elasticsearch-view-role"
    kind: rolebinding
    namespace: "{{ openshift_logging_elasticsearch_namespace }}"
    files:
      - "{{ tempdir }}/logging-elasticsearch-view-role.yaml"
    delete_after: true


# Add hostmount SCC to the service account if required
- name: Detect common lowest denominator for ES storage if hostaccess SCC is required (for clientdata)
  set_fact:
    openshift_logging_elasticsearch_storage_type: "hostmount"
  when:
    - '"hostmount" in openshift_logging_elasticsearch_topology.node_topology.clientdata | map(attribute="node_storage_type")| list'
  ignore_errors: yes

- name: Detect common lowest denominator for ES storage if hostaccess SCC is required (for clientdatamaster)
  set_fact:
    openshift_logging_elasticsearch_storage_type: "hostmount"
  when:
    - '"hostmount" in openshift_logging_elasticsearch_topology.node_topology.clientdatamaster.node_storage_type'
  ignore_errors: yes


- name: Add hostaccess SCC to the service account in case nodes use hostmount
  oc_adm_policy_user:
    resource_kind: scc
    resource_name: hostaccess
    user: "system:serviceaccount:{{ openshift_logging_elasticsearch_namespace }}:{{ openshift_logging_elasticsearch_sa_name }}"
  when: openshift_logging_elasticsearch_storage_type == "hostmount"

- name: Delete temp directory
  file:
    name: "{{ tempdir }}"
    state: absent
  changed_when: False
