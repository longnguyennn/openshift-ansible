---
# service account
- name: Create ES service account
  oc_serviceaccount:
    state: present
    name: "aggregated-logging-elasticsearch"
    namespace: "{{ openshift_elasticsearch_namespace }}"
    image_pull_secrets: "{{ openshift_elasticsearch_image_pull_secret }}"
  when: openshift_elasticsearch_image_pull_secret != ''

- name: Create ES service account
  oc_serviceaccount:
    state: present
    name: "aggregated-logging-elasticsearch"
    namespace: "{{ openshift_elasticsearch_namespace }}"
  when:
  - openshift_elasticsearch_image_pull_secret == ''

# allow passing in a tempdir
- name: Create temp directory for doing work in
  command: mktemp -d /tmp/openshift-logging-ansible-XXXXXX
  register: mktemp
  changed_when: False

- set_fact:
    tempdir: "{{ mktemp.stdout }}"

# This may not be necessary in this role
- name: Create templates subdirectory
  file:
    state: directory
    path: "{{ tempdir }}/templates"
    mode: 0755
  changed_when: False

# rolebinding reader
- copy:
    src: rolebinding-reader.yml
    dest: "{{ tempdir }}/rolebinding-reader.yml"

- name: Create rolebinding-reader role
  oc_obj:
    state: present
    name: "rolebinding-reader"
    kind: clusterrole
    namespace: "{{ openshift_elasticsearch_namespace }}"
    files:
    - "{{ tempdir }}/rolebinding-reader.yml"
    delete_after: true

# SA roles
- name: Set rolebinding-reader permissions for ES
  oc_adm_policy_user:
    state: present
    namespace: "{{ openshift_elasticsearch_namespace }}"
    resource_kind: cluster-role
    resource_name: rolebinding-reader
    user: "system:serviceaccount:{{ openshift_elasticsearch_namespace }}:aggregated-logging-elasticsearch"

# view role
- copy:
    src: rolebinding-es.yml
    dest: "{{ tempdir }}/rolebinding-es.yml"

- name: Crete rolebinding for view role
  oc_obj:
    state: present
    name: logging-elasticsearch-view-role
    kind: rolebinding
    namespace: "{{ openshift_elasticsearch_namespace }}"
    files:
    - "{{ tempdir }}/rolebinding-es.yml"
    delete_after: true

- name: Delete temp directory
  file:
    name: "{{ tempdir }}"
    state: absent
  changed_when: False
